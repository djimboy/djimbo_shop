# - *- coding: utf- 8 - *-

from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.types import CallbackQuery
from aiogram.utils.exceptions import CantParseEntities

from filters import IsAdmin
from keyboards.default import items_default, skip_send_image_default, cancel_send_image_default, \
    finish_load_items_default
from keyboards.inline import *
from keyboards.inline.inline_page import *
from loader import dp, bot
from middlewares.throttling import rate_limit
from states.state_items import StoragePosition, StorageCategory, StorageItems
from utils.other_func import clear_firstname, get_dates


# –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@dp.message_handler(IsAdmin(), text="üìú –°–æ–∑–¥–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é ‚ûï", state="*")
async def category_create_new(message: types.Message, state: FSMContext):
    await state.finish()
    await StorageCategory.here_input_category_name.set()
    await message.answer("<b>üìú –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ üè∑</b>")


# –û—Ç–∫—Ä—ã—Ç–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@dp.message_handler(IsAdmin(), text="üìú –ò–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é üñç", state="*")
async def category_open_edit(message: types.Message, state: FSMContext):
    await state.finish()
    get_categories = get_all_categoriesx()
    if len(get_categories) >= 1:
        get_kb = category_open_edit_ap(0)
        await message.answer("<b>üìú –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è üñç</b>", reply_markup=get_kb)
    else:
        await message.answer("<b>üìú –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç üñç</b>")


# –û–∫–Ω–æ —Å —É—Ç–æ—á–Ω–µ–Ω–∏–µ–º —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–ø–æ–∑–∏—Ü–∏–∏ –∏ —Ç–æ–≤–∞—Ä—ã –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ)
@dp.message_handler(IsAdmin(), text="üìú –£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ‚ùå", state="*")
async def category_remove_all(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer("<b>üìú –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏? ‚ùå</b>\n"
                         "‚ùó –¢–∞–∫ –∂–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏ –∏ —Ç–æ–≤–∞—Ä—ã",
                         reply_markup=confirm_clear_category_inl)


# –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏
@dp.message_handler(IsAdmin(), text="üìÅ –°–æ–∑–¥–∞—Ç—å –ø–æ–∑–∏—Ü–∏—é ‚ûï", state="*")
async def position_create_new(message: types.Message, state: FSMContext):
    await state.finish()
    get_categories = get_all_categoriesx()
    if len(get_categories) >= 1:
        get_kb = position_open_create_ap(0)
        await message.answer("<b>üìÅ –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Ç–æ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ ‚ûï</b>", reply_markup=get_kb)
    else:
        await message.answer("<b>‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏.</b>")


# –ù–∞—á–∞–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏
@dp.message_handler(IsAdmin(), text="üìÅ –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é üñç", state="*")
async def choice_category_for_edit_position(message: types.Message, state: FSMContext):
    await state.finish()
    get_kb = position_open_edit_category_ap(0)
    await message.answer("<b>üìÅ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å –Ω—É–∂–Ω–æ–π –≤–∞–º –ø–æ–∑–∏—Ü–∏–µ–π üñç</b>", reply_markup=get_kb)


# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π
@dp.message_handler(IsAdmin(), text="üìÅ –£–¥–∞–ª–∏—Ç—å –ø–æ–∑–∏—Ü–∏–∏ ‚ùå", state="*")
async def open_create_position(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer("<b>üìú –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏? ‚ùå</b>\n"
                         "‚ùó –¢–∞–∫ –∂–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –≤—Å–µ —Ç–æ–≤–∞—Ä—ã",
                         reply_markup=confirm_clear_position_inl)


# –ù–∞—á–∞–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤
@dp.message_handler(IsAdmin(), text="üéÅ –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä—ã ‚ûï", state="*")
async def choice_category_for_edit_position(message: types.Message, state: FSMContext):
    await state.finish()
    get_positions = get_all_positionsx()
    if len(get_positions) >= 1:
        get_kb = item_open_add_category_ap(0)
        await message.answer("<b>üéÅ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å –Ω—É–∂–Ω–æ–π –≤–∞–º –ø–æ–∑–∏—Ü–∏–µ–π ‚ûï</b>", reply_markup=get_kb)
    else:
        await message.answer("<b>‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞.</b>")


# –ö–Ω–æ–ø–∫–∞ —Å –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º —Ç–æ–≤–∞—Ä–æ–≤
@dp.message_handler(IsAdmin(), text="üéÅ –ò–∑–º–µ–Ω–∏—Ç—å —Ç–æ–≤–∞—Ä—ã üñç", state="*")
async def open_edit_items(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer("<b>üîπ –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∏ –∏—Ö –ø–æ–∑–∏—Ü–∏–π:</b> /getinfoitems\n"
                         "<b>üî∏ –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π:</b> /getposition\n"
                         "<b>üîπ –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤:</b> /getitems\n"
                         "<b>üî∏ –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:</b> /getbd",
                         reply_markup=delete_item_inl)


# –ö–Ω–æ–ø–∫–∏ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
@dp.message_handler(IsAdmin(), text="üéÅ –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä—ã ‚ùå", state="*")
async def open_create_category(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer("<b>üéÅ –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ç–æ–≤–∞—Ä—ã?</b> ‚ùå\n",
                         reply_markup=confirm_clear_item_inl)


################################################################################################
####################################### –°–û–ó–î–ê–ù–ò–ï –ö–ê–¢–ï–ì–û–†–ò–ô #####################################
# –ü—Ä–∏–Ω—è—Ç–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –µ—ë —Å–æ–∑–¥–∞–Ω–∏—è
@dp.message_handler(IsAdmin(), state=StorageCategory.here_input_category_name)
async def category_create_input_name(message: types.Message, state: FSMContext):
    category_id = [random.randint(100000000, 999999999)]
    add_categoryx(category_id[0], message.text)
    await state.finish()
    await message.answer("<b>üìú –ö–∞—Ç–µ–≥–æ—Ä–∏—è –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ ‚úÖ</b>",
                         reply_markup=items_default)


################################################################################################
####################################### –ò–ó–ú–ï–ù–ï–ù–ò–ï –ö–ê–¢–ï–ì–û–†–ò–ô ####################################
# –°–¥–µ–ª—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@dp.callback_query_handler(IsAdmin(), text_startswith="edit_catategory_nextp", state="*")
async def category_edit_next_page(call: CallbackQuery, state: FSMContext):
    remover = int(call.data.split(":")[1])

    get_kb = category_edit_next_page_ap(remover)
    await bot.edit_message_text("<b>üìú –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è üñç</b>",
                                call.from_user.id,
                                call.message.message_id,
                                reply_markup=get_kb)


# –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@dp.callback_query_handler(IsAdmin(), text_startswith="edit_catategory_prevp", state="*")
async def category_edit_prev_page(call: CallbackQuery, state: FSMContext):
    remover = int(call.data.split(":")[1])

    get_kb = category_edit_prev_page_ap(remover)
    await bot.edit_message_text("<b>üìú –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è üñç</b>",
                                call.from_user.id,
                                call.message.message_id,
                                reply_markup=get_kb)


# –í—ã–±–æ—Ä —Ç–µ–∫—É—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@dp.callback_query_handler(IsAdmin(), text_startswith="edit_category_here", state="*")
async def category_open_for_edit(call: CallbackQuery, state: FSMContext):
    category_id = int(call.data.split(":")[1])
    remover = int(call.data.split(":")[2])

    messages, keyboard = edit_category_func(category_id, remover)
    await bot.edit_message_text(messages,
                                call.from_user.id,
                                call.message.message_id,
                                reply_markup=keyboard)


# –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –∫ —Å–ø–∏—Å–∫—É –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@dp.callback_query_handler(IsAdmin(), text_startswith="back_category_edit", state="*")
async def category_back_for_edit(call: CallbackQuery, state: FSMContext):
    remover = int(call.data.split(":")[1])

    get_kb = category_open_edit_ap(remover)
    await bot.edit_message_text("<b>üìú –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è üñç</b>",
                                call.from_user.id,
                                call.message.message_id,
                                reply_markup=get_kb)


######################################## –°–ê–ú–û –ò–ó–ú–ï–ù–ï–ù–ò–ï –ö–ê–¢–ï–ì–û–†–ò–ò ########################################
# –ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@dp.callback_query_handler(IsAdmin(), text_startswith="category_edit_name", state="*")
async def category_edit_name(call: CallbackQuery, state: FSMContext):
    category_id = int(call.data.split(":")[1])
    remover = int(call.data.split(":")[2])
    async with state.proxy() as data:
        data["here_cache_category_id"] = category_id
        data["here_cache_category_remover"] = remover
    await StorageCategory.here_change_category_name.set()
    await bot.delete_message(call.from_user.id, call.message.message_id)
    await bot.send_message(call.from_user.id,
                           "<b>üè∑ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:</b>")


# –ü—Ä–∏–Ω—è—Ç–∏–µ –Ω–æ–≤–æ–≥–æ –∏–º–µ–Ω–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@dp.message_handler(IsAdmin(), state=StorageCategory.here_change_category_name)
async def category_name_was_changed(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        category_id = data["here_cache_category_id"]
        remover = data["here_cache_category_remover"]
    update_categoryx(category_id, category_name=message.text)
    await state.finish()
    await message.answer("<b>üìú –ù–∞–∑–≤–∞–Ω–∏–µ –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ ‚úÖ</b>",
                         reply_markup=items_default)
    messages, keyboard = edit_category_func(category_id, remover)
    await message.answer(messages, reply_markup=keyboard)


# –û–∫–Ω–æ —Å —É—Ç–æ—á–Ω–µ–Ω–∏–µ–º —É–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é
@dp.callback_query_handler(IsAdmin(), text_startswith="category_remove", state="*")
async def category_remove(call: CallbackQuery, state: FSMContext):
    category_id = int(call.data.split(":")[1])
    remover = int(call.data.split(":")[2])
    await bot.edit_message_text("<b>‚ùó –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ –≤—Å–µ –µ—ë –¥–∞–Ω–Ω—ã–µ?</b>",
                                call.from_user.id,
                                call.message.message_id,
                                reply_markup=confirm_remove_func(category_id, remover))


# –û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@dp.callback_query_handler(IsAdmin(), text_startswith="not_remove_category", state="*")
async def category_remove_cancel(call: CallbackQuery, state: FSMContext):
    category_id = int(call.data.split(":")[1])
    remover = int(call.data.split(":")[2])
    messages, keyboard = edit_category_func(category_id, remover)
    await bot.edit_message_text(messages,
                                call.from_user.id,
                                call.message.message_id,
                                reply_markup=keyboard)


# –°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@dp.callback_query_handler(IsAdmin(), text_startswith="yes_remove_category", state="*")
async def category_remove_confirm(call: CallbackQuery, state: FSMContext):
    category_id = int(call.data.split(":")[1])
    remover = int(call.data.split(":")[2])

    remove_categoryx(category_id=category_id)  # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    remove_positionx(category_id=category_id)  # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π
    remove_itemx(category_id=category_id)  # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤

    await bot.edit_message_text("<b>üìú –ö–∞—Ç–µ–≥–æ—Ä–∏—è –∏ –≤—Å–µ –µ—ë –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã ‚úÖ</b>",
                                call.from_user.id,
                                call.message.message_id)
    get_kb = category_open_edit_ap(remover)
    await bot.send_message(call.from_user.id,
                           "<b>üìú –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è üñç</b>",
                           reply_markup=get_kb)


################################################################################################
#################################### –£–î–ê–õ–ï–ù–ò–ï –í–°–ï–• –ö–ê–¢–ï–ì–û–†–ò–ô ###################################
# –°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π (–ø–æ–∑–∏—Ü–∏–π –∏ —Ç–æ–≤–∞—Ä–æ–≤ –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ)
@dp.callback_query_handler(IsAdmin(), text_startswith="confirm_clear_category", state="*")
async def category_remove_all_confirm(call: CallbackQuery, state: FSMContext):
    clear_categoryx()
    clear_positionx()
    clear_itemx()
    await bot.edit_message_text("<b>‚òë –í—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–∏–ª–∏ –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –ø–æ–∑–∏—Ü–∏–∏ –∏ —Ç–æ–≤–∞—Ä—ã</b>",
                                call.from_user.id,
                                call.message.message_id)


# –û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π (–ø–æ–∑–∏—Ü–∏–π –∏ —Ç–æ–≤–∞—Ä–æ–≤ –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ)
@dp.callback_query_handler(IsAdmin(), text_startswith="cancel_clear_category", state="*")
async def category_remove_all_cancel(call: CallbackQuery, state: FSMContext):
    await bot.edit_message_text("<b>‚òë –í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π ‚òë</b>",
                                call.from_user.id,
                                call.message.message_id)


################################################################################################
####################################### –î–û–ë–ê–í–õ–ï–ù–ò–ï –ü–û–ó–ò–¶–ò–ô #####################################
# –°–¥–µ–ª—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π
@dp.callback_query_handler(IsAdmin(), text_startswith="create_position_nextp", state="*")
async def position_next_page(call: CallbackQuery, state: FSMContext):
    remover = int(call.data.split(":")[1])

    get_kb = position_create_next_page_ap(remover)
    await bot.edit_message_text("<b>üìÅ –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Ç–æ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ ‚ûï</b>",
                                call.from_user.id,
                                call.message.message_id,
                                reply_markup=get_kb)


# –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π
@dp.callback_query_handler(IsAdmin(), text_startswith="create_position_prevp", state="*")
async def position_prev_page(call: CallbackQuery, state: FSMContext):
    remover = int(call.data.split(":")[1])

    get_kb = position_create_previous_page_ap(remover)
    await bot.edit_message_text("<b>üìÅ –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Ç–æ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ ‚ûï</b>",
                                call.from_user.id,
                                call.message.message_id,
                                reply_markup=get_kb)


# –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏
@dp.callback_query_handler(IsAdmin(), text_startswith="create_position_here", state="*")
async def position_select_category_for_create(call: CallbackQuery, state: FSMContext):
    category_id = int(call.data.split(":")[1])
    async with state.proxy() as data:
        data["here_cache_change_category_id"] = category_id
    await StoragePosition.here_input_position_name.set()
    await bot.delete_message(call.from_user.id, call.message.message_id)
    await bot.send_message(call.from_user.id,
                           "<b>üìÅ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ üè∑</b>")


# –ü—Ä–∏–Ω—è—Ç–∏–µ –∏–º–µ–Ω–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏
@dp.message_handler(IsAdmin(), state=StoragePosition.here_input_position_name)
async def position_input_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data["here_input_position_name"] = message.text
    await StoragePosition.here_input_position_price.set()
    await message.answer("<b>üìÅ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ üí∞</b>")


# –ü—Ä–∏–Ω—è—Ç–∏–µ —Ü–µ–Ω—ã –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –µ—ë —Å–æ–∑–¥–∞–Ω–∏—è
@dp.message_handler(IsAdmin(), state=StoragePosition.here_input_position_price)
async def position_input_price(message: types.Message, state: FSMContext):
    if message.text.isdigit():
        if int(message.text) >= 0:
            async with state.proxy() as data:
                data["here_input_position_price"] = message.text
            await StoragePosition.here_input_position_discription.set()
            await message.answer("<b>üìÅ –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ üìú</b>\n"
                                 "‚ùï –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å HTML —Ä–∞–∑–º–µ—Ç–∫—É")
        else:
            await StoragePosition.here_input_position_price.set()
            await message.answer("<b>‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ 0 —Ä—É–±–ª–µ–π.</b>\n"
                                 "üìÅ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ üí∞")
    else:
        await StoragePosition.here_input_position_price.set()
        await message.answer("<b>‚ùå –î–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –≤–≤–µ–¥–µ–Ω—ã –Ω–µ–≤–µ—Ä–Ω–æ.</b>\n"
                             "üìÅ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ üí∞")


# –ü—Ä–∏–Ω—è—Ç–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –µ—ë —Å–æ–∑–¥–∞–Ω–∏—è
@dp.message_handler(IsAdmin(), state=StoragePosition.here_input_position_discription)
async def position_input_discription(message: types.Message, state: FSMContext):
    try:
        delete_msg = await message.answer(message.text)
        await bot.delete_message(message.chat.id, delete_msg.message_id)
        async with state.proxy() as data:
            data["here_input_position_discription"] = message.text
        await StoragePosition.here_input_position_image.set()
        await message.answer("<b>üìÅ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ üì∏</b>", reply_markup=skip_send_image_default)
    except CantParseEntities:
        await StoragePosition.here_input_position_discription.set()
        await bot.send_message(message.from_user.id,
                               "<b>‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ HTML.</b>\n"
                               "üìÅ –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ üìú\n"
                               "‚ùï –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å HTML —Ä–∞–∑–º–µ—Ç–∫—É")


# –ü—Ä–∏–Ω—è—Ç–∏–µ –ø—Ä–æ–ø—É—Å–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –µ—ë —Å–æ–∑–¥–∞–Ω–∏—è
@dp.message_handler(IsAdmin(), text="üì∏ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", state=StoragePosition.here_input_position_image)
async def position_skip_get_image(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        position_name = data["here_input_position_name"]
        position_price = data["here_input_position_price"]
        position_discription = data["here_input_position_discription"]
        catategory_id = data["here_cache_change_category_id"]
    await state.finish()
    position_id = [random.randint(100000000, 999999999)]
    add_positionx(position_id[0], position_name, position_price, position_discription,
                  "", get_dates(), catategory_id)
    await message.answer("<b>üìÅ –ü–æ–∑–∏—Ü–∏—è –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ ‚úÖ</b>",
                         reply_markup=items_default)


# –ü—Ä–∏–Ω—è—Ç–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –µ—ë —Å–æ–∑–¥–∞–Ω–∏—è
@dp.message_handler(content_types=["photo"], state=StoragePosition.here_input_position_image)
async def position_get_image(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        position_name = data["here_input_position_name"]
        position_price = data["here_input_position_price"]
        position_discription = data["here_input_position_discription"]
        catategory_id = data["here_cache_change_category_id"]
    position_photo = message.photo[0].file_id
    await state.finish()
    position_id = [random.randint(100000000, 999999999)]
    add_positionx(position_id[0], position_name, position_price, position_discription,
                  position_photo, get_dates(), catategory_id)
    await message.answer("<b>üìÅ –ü–æ–∑–∏—Ü–∏—è –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ ‚úÖ</b>",
                         reply_markup=items_default)


################################################################################################
####################################### –ò–ó–ú–ï–ù–ï–ù–ò–ï –ü–û–ó–ò–¶–ò–ô #####################################
# –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –∫ –Ω–∞—á–∞–ª—å–Ω—ã–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏
@dp.callback_query_handler(IsAdmin(), text_startswith="back_to_category", state="*")
async def back_to_all_categories_for_edit_position(call: CallbackQuery, state: FSMContext):
    get_kb = position_open_edit_category_ap(0)

    await bot.edit_message_text("<b>üìÅ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å –Ω—É–∂–Ω–æ–π –≤–∞–º –ø–æ–∑–∏—Ü–∏–µ–π üñç</b>",
                                call.from_user.id,
                                call.message.message_id,
                                reply_markup=get_kb)


# –°–¥–µ–ª—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –ø–æ–∑–∏—Ü–∏–µ–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@dp.callback_query_handler(IsAdmin(), text_startswith="edit_position_category_nextp", state="*")
async def next_page_category_for_edit_position(call: CallbackQuery, state: FSMContext):
    remover = int(call.data.split(":")[1])

    get_kb = position_edit_next_page_category_ap(remover)
    await bot.edit_message_text("<b>üìÅ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å –Ω—É–∂–Ω–æ–π –≤–∞–º –ø–æ–∑–∏—Ü–∏–µ–π üñç</b>",
                                call.from_user.id,
                                call.message.message_id,
                                reply_markup=get_kb)


# –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –ø–æ–∑–∏—Ü–∏–µ–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@dp.callback_query_handler(IsAdmin(), text_startswith="edit_position_category_prevp", state="*")
async def previous_page_category_for_edit_position(call: CallbackQuery, state: FSMContext):
    remover = int(call.data.split(":")[1])

    get_kb = position_edit_previous_page_category_ap(remover)
    await bot.edit_message_text("<b>üìÅ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å –Ω—É–∂–Ω–æ–π –≤–∞–º –ø–æ–∑–∏—Ü–∏–µ–π üñç</b>",
                                call.from_user.id,
                                call.message.message_id,
                                reply_markup=get_kb)


# –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –Ω—É–∂–Ω–æ–π –ø–æ–∑–∏—Ü–∏–µ–π
@dp.callback_query_handler(IsAdmin(), text_startswith="position_edit_category", state="*")
async def open_category_for_edit_position(call: CallbackQuery, state: FSMContext):
    category_id = int(call.data.split(":")[1])

    get_positions = get_positionsx("*", category_id=category_id)
    if len(get_positions) >= 1:
        get_kb = position_open_edit_ap(0, category_id)
        await bot.edit_message_text("<b>üìÅ –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –≤–∞–º –ø–æ–∑–∏—Ü–∏—é üñç</b>",
                                    call.from_user.id,
                                    call.message.message_id,
                                    reply_markup=get_kb)
    else:
        await bot.answer_callback_query(call.id, "üìÅ –ü–æ–∑–∏—Ü–∏–∏ –≤ –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")


# –°–¥–µ–ª—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è
@dp.callback_query_handler(IsAdmin(), text_startswith="edit_position_nextp", state="*")
async def next_page_for_edit_position(call: CallbackQuery, state: FSMContext):
    remover = int(call.data.split(":")[1])
    category_id = int(call.data.split(":")[2])

    get_kb = position_edit_next_page_ap(remover, category_id)
    await bot.edit_message_text("<b>üìÅ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å –Ω—É–∂–Ω–æ–π –≤–∞–º –ø–æ–∑–∏—Ü–∏–µ–π üñç</b>",
                                call.from_user.id,
                                call.message.message_id,
                                reply_markup=get_kb)


# –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è
@dp.callback_query_handler(IsAdmin(), text_startswith="edit_position_prevp", state="*")
async def previous_page_for_edit_position(call: CallbackQuery, state: FSMContext):
    remover = int(call.data.split(":")[1])
    category_id = int(call.data.split(":")[2])

    get_kb = position_edit_previous_page_ap(remover, category_id)
    await bot.edit_message_text("<b>üìÅ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å –Ω—É–∂–Ω–æ–π –≤–∞–º –ø–æ–∑–∏—Ü–∏–µ–π üñç</b>",
                                call.from_user.id,
                                call.message.message_id,
                                reply_markup=get_kb)


# –í—ã–±–æ—Ä –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@dp.callback_query_handler(IsAdmin(), text_startswith="position_edit", state="*")
async def open_for_edit_position(call: CallbackQuery, state: FSMContext):
    position_id = int(call.data.split(":")[1])
    remover = int(call.data.split(":")[2])
    category_id = int(call.data.split(":")[3])
    get_position = get_positionx("*", position_id=position_id)
    messages, keyboard, have_photo = open_edit_position_func(position_id, category_id, remover)

    if have_photo:
        await bot.delete_message(call.from_user.id, call.message.message_id)
        await bot.send_photo(call.from_user.id, get_position[5], messages, reply_markup=keyboard)
    else:
        await bot.edit_message_text(messages,
                                    call.from_user.id,
                                    call.message.message_id,
                                    reply_markup=keyboard)


# –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –∫ –≤—ã–±–æ—Ä—É –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è
@dp.callback_query_handler(IsAdmin(), text_startswith="back_position_edit", state="*")
async def back_to_all_categories_for_choice_edit(call: CallbackQuery, state: FSMContext):
    category_id = int(call.data.split(":")[1])
    remover = int(call.data.split(":")[2])

    get_positions = get_positionsx("*", category_id=category_id)
    if len(get_positions) >= 1:
        get_kb = position_open_edit_ap(remover, category_id)
        await bot.delete_message(call.from_user.id, call.message.message_id)
        await bot.send_message(call.from_user.id,
                               "<b>üìÅ –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –≤–∞–º –ø–æ–∑–∏—Ü–∏—é üñç</b>",
                               reply_markup=get_kb)
    else:
        await bot.edit_message_text("<b>‚ùó –ü–æ–∑–∏—Ü–∏–∏ –≤ –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç</b>",
                                    call.from_user.id,
                                    call.message.message_id)


######################################## –°–ê–ú–û –ò–ó–ú–ï–ù–ï–ù–ò–ï –ü–û–ó–ò–¶–ò–ò ########################################
# –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–∑–∏—Ü–∏–∏
@dp.callback_query_handler(IsAdmin(), text_startswith="position_change_name", state="*")
async def change_position_name(call: CallbackQuery, state: FSMContext):
    category_id = int(call.data.split(":")[1])
    position_id = int(call.data.split(":")[2])
    remover = int(call.data.split(":")[3])
    async with state.proxy() as data:
        data["here_cache_category_id"] = category_id
        data["here_cache_position_id"] = position_id
        data["here_cache_position_remover"] = remover
    await StoragePosition.here_change_position_name.set()
    await bot.delete_message(call.from_user.id, call.message.message_id)
    await bot.send_message(call.from_user.id,
                           "<b>üè∑ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏</b>")


# –ü—Ä–∏–Ω—è—Ç–∏–µ –∏–º–µ–Ω–∏ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –µ—ë –∏–∑–º–µ–Ω–µ–Ω–∏—è
@dp.message_handler(IsAdmin(), state=StoragePosition.here_change_position_name)
async def input_new_position_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        position_id = data["here_cache_category_id"]
        category_id = data["here_cache_position_id"]
        remover = data["here_cache_position_remover"]
    update_positionx(position_id, position_name=message.text)

    messages, keyboard, have_photo = open_edit_position_func(position_id, category_id, remover)
    await message.answer("<b>‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ</b>", reply_markup=items_default)
    await state.finish()

    get_position = get_positionx("*", position_id=position_id)
    await bot.delete_message(message.from_user.id, message.message_id)
    if have_photo:
        await message.answer_photo(get_position[5], messages, reply_markup=keyboard)
    else:
        await message.answer(messages, reply_markup=keyboard)


# –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –ø–æ–∑–∏—Ü–∏–∏
@dp.callback_query_handler(IsAdmin(), text_startswith="position_change_price", state="*")
async def change_position_price(call: CallbackQuery, state: FSMContext):
    category_id = int(call.data.split(":")[1])
    position_id = int(call.data.split(":")[2])
    remover = int(call.data.split(":")[3])
    async with state.proxy() as data:
        data["here_cache_category_id"] = category_id
        data["here_cache_position_id"] = position_id
        data["here_cache_position_remover"] = remover
    await StoragePosition.here_change_position_price.set()
    await bot.delete_message(call.from_user.id, call.message.message_id)
    await bot.send_message(call.from_user.id,
                           "<b>üí∞ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏</b>")


# –ü—Ä–∏–Ω—è—Ç–∏–µ —Ü–µ–Ω—ã –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –µ—ë –∏–∑–º–µ–Ω–µ–Ω–∏—è
@dp.message_handler(IsAdmin(), state=StoragePosition.here_change_position_price)
async def input_new_position_price(message: types.Message, state: FSMContext):
    if message.text.isdigit():
        if int(message.text) >= 0:
            async with state.proxy() as data:
                position_id = data["here_cache_category_id"]
                category_id = data["here_cache_position_id"]
                remover = data["here_cache_position_remover"]
            update_positionx(position_id, position_price=message.text)

            messages, keyboard, have_photo = open_edit_position_func(position_id, category_id, remover)
            await message.answer("<b>‚úÖ –¶–µ–Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞</b>", reply_markup=items_default)
            await state.finish()

            get_position = get_positionx("*", position_id=position_id)
            await bot.delete_message(message.from_user.id, message.message_id)
            if have_photo:
                await message.answer_photo(get_position[5], messages, reply_markup=keyboard)
            else:
                await message.answer(messages, reply_markup=keyboard)
        else:
            await StoragePosition.here_change_position_name.set()
            await message.answer("<b>‚ùå –¶–µ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ 0.</b>\n"
                                 "üìÅ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ üí∞")
    else:
        await StoragePosition.here_change_position_name.set()
        await message.answer("<b>‚ùå –î–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –≤–≤–µ–¥–µ–Ω—ã –Ω–µ–≤–µ—Ä–Ω–æ.</b>\n"
                             "üìÅ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ üí∞")


# –ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏
@dp.callback_query_handler(IsAdmin(), text_startswith="position_change_discription", state="*")
async def change_position_discription(call: CallbackQuery, state: FSMContext):
    category_id = int(call.data.split(":")[1])
    position_id = int(call.data.split(":")[2])
    remover = int(call.data.split(":")[3])
    async with state.proxy() as data:
        data["here_cache_category_id"] = category_id
        data["here_cache_position_id"] = position_id
        data["here_cache_position_remover"] = remover
    await StoragePosition.here_change_position_discription.set()
    await bot.delete_message(call.from_user.id, call.message.message_id)
    await bot.send_message(call.from_user.id,
                           "<b>üìú –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏</b>")


# –ü—Ä–∏–Ω—è—Ç–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –µ—ë –∏–∑–º–µ–Ω–µ–Ω–∏—è
@dp.message_handler(IsAdmin(), state=StoragePosition.here_change_position_discription)
async def input_position_discription(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        position_id = data["here_cache_category_id"]
        category_id = data["here_cache_position_id"]
        remover = data["here_cache_position_remover"]
    try:
        delete_msg = await message.answer(message.text)
        await bot.delete_message(message.chat.id, delete_msg.message_id)
        update_positionx(position_id, position_discription=message.text)

        messages, keyboard, have_photo = open_edit_position_func(position_id, category_id, remover)
        await message.answer("<b>‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ</b>", reply_markup=items_default)
        await state.finish()

        get_position = get_positionx("*", position_id=position_id)
        await bot.delete_message(message.from_user.id, message.message_id)
        if have_photo:
            await message.answer_photo(get_position[5], messages, reply_markup=keyboard)
        else:
            await message.answer(messages, reply_markup=keyboard)
    except CantParseEntities:
        await StoragePosition.here_change_position_discription.set()
        await bot.send_message(message.from_user.id,
                               "<b>‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ HTML.</b>\n"
                               "üìú –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏")


# –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏
@dp.callback_query_handler(IsAdmin(), text_startswith="position_change_photo", state="*")
async def change_position_photo(call: CallbackQuery, state: FSMContext):
    category_id = int(call.data.split(":")[1])
    position_id = int(call.data.split(":")[2])
    remover = int(call.data.split(":")[3])
    async with state.proxy() as data:
        data["here_cache_category_id"] = category_id
        data["here_cache_position_id"] = position_id
        data["here_cache_position_remover"] = remover
    await StoragePosition.here_change_position_image.set()
    await bot.delete_message(call.from_user.id, call.message.message_id)
    await bot.send_message(call.from_user.id,
                           "<b>üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏</b>",
                           reply_markup=cancel_send_image_default)


# –û—Ç–º–µ–Ω–∞ –ø—Ä–∏–Ω—è—Ç–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –µ—ë –∏–∑–º–µ–Ω–µ–Ω–∏—è
@dp.message_handler(IsAdmin(), text="üì∏ –û—Ç–º–µ–Ω–∏—Ç—å", state=StoragePosition.here_change_position_image)
async def cancel_input_position_photo(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        position_id = data["here_cache_category_id"]
        category_id = data["here_cache_position_id"]
        remover = data["here_cache_position_remover"]
    update_positionx(position_id, position_image="")

    messages, keyboard, have_photo = open_edit_position_func(position_id, category_id, remover)
    await message.answer("<b>‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ</b>", reply_markup=items_default)
    await state.finish()

    get_position = get_positionx("*", position_id=position_id)
    await bot.delete_message(message.from_user.id, message.message_id)
    if have_photo:
        await message.answer_photo(get_position[5], messages, reply_markup=keyboard)
    else:
        await message.answer(messages, reply_markup=keyboard)


# –ü—Ä–∏–Ω—è—Ç–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –µ—ë –∏–∑–º–µ–Ω–µ–Ω–∏—è
@dp.message_handler(content_types=["photo"], state=StoragePosition.here_change_position_image)
async def input_position_photo(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        position_id = data["here_cache_category_id"]
        category_id = data["here_cache_position_id"]
        remover = data["here_cache_position_remover"]
    update_positionx(position_id, position_image=message.photo[0].file_id)

    messages, keyboard, have_photo = open_edit_position_func(position_id, category_id, remover)
    await message.answer("<b>‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ</b>", reply_markup=items_default)
    await state.finish()

    get_position = get_positionx("*", position_id=position_id)
    await bot.delete_message(message.from_user.id, message.message_id)
    if have_photo:
        await message.answer_photo(get_position[5], messages, reply_markup=keyboard)
    else:
        await message.answer(messages, reply_markup=keyboard)


# –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏
@dp.callback_query_handler(IsAdmin(), text_startswith="position_remove_this", state="*")
async def open_category_for_create_position(call: CallbackQuery, state: FSMContext):
    position_id = int(call.data.split(":")[1])
    category_id = int(call.data.split(":")[2])
    remover = int(call.data.split(":")[3])

    await bot.delete_message(call.from_user.id, call.message.message_id)
    await bot.send_message(call.from_user.id,
                           "<b>üìú –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é?</b>",
                           reply_markup=confirm_remove_position_func(position_id, category_id, remover))


# –°–æ–≥–ª–∞—Å–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏
@dp.callback_query_handler(IsAdmin(), text_startswith="yes_remove_position", state="*")
async def open_category_for_create_position(call: CallbackQuery, state: FSMContext):
    position_id = int(call.data.split(":")[1])
    category_id = int(call.data.split(":")[2])
    remover = int(call.data.split(":")[3])

    remove_itemx(position_id=position_id)
    remove_positionx(position_id=position_id)
    await bot.edit_message_text("<b>‚òë –í—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–∏–ª–∏ –ø–æ–∑–∏—Ü–∏—é –∏ –µ—ë —Ç–æ–≤–∞—Ä—ã</b>",
                                call.from_user.id,
                                call.message.message_id)

    get_positions = get_positionsx("*", category_id=category_id)
    if len(get_positions) >= 1:
        get_kb = position_open_edit_ap(remover, category_id)
        await bot.delete_message(call.from_user.id, call.message.message_id)
        await bot.send_message(call.from_user.id,
                               "<b>üìÅ –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –≤–∞–º –ø–æ–∑–∏—Ü–∏—é üñç</b>",
                               reply_markup=get_kb)


# –û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏
@dp.callback_query_handler(IsAdmin(), text_startswith="not_remove_position", state="*")
async def open_category_for_create_position(call: CallbackQuery, state: FSMContext):
    position_id = int(call.data.split(":")[1])
    category_id = int(call.data.split(":")[2])
    remover = int(call.data.split(":")[3])

    messages, keyboard, have_photo = open_edit_position_func(position_id, category_id, remover)
    await state.finish()

    get_position = get_positionx("*", position_id=position_id)
    await bot.delete_message(call.from_user.id, call.message.message_id)
    if have_photo:
        await bot.send_photo(call.from_user.id, get_position[5], messages, reply_markup=keyboard)
    else:
        await bot.send_message(call.from_user.id, messages, reply_markup=keyboard)


# –û—á–∏—Å—Ç–∫–∞ –ø–æ–∑–∏—Ü–∏–∏
@dp.callback_query_handler(IsAdmin(), text_startswith="position_clear_this", state="*")
async def open_category_for_clear_position(call: CallbackQuery, state: FSMContext):
    position_id = int(call.data.split(":")[1])
    category_id = int(call.data.split(":")[2])
    remover = int(call.data.split(":")[3])

    await bot.delete_message(call.from_user.id, call.message.message_id)
    await bot.send_message(call.from_user.id,
                           "<b>üìú –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é?</b>",
                           reply_markup=confirm_clear_position_func(position_id, category_id, remover))


# –°–æ–≥–ª–∞—Å–∏–µ –æ—á–∏—Å—Ç–∏–∫–∏ –ø–æ–∑–∏—Ü–∏–∏
@dp.callback_query_handler(IsAdmin(), text_startswith="yes_clear_position", state="*")
async def open_category_for_clear_position(call: CallbackQuery, state: FSMContext):
    position_id = int(call.data.split(":")[1])
    category_id = int(call.data.split(":")[2])
    remover = int(call.data.split(":")[3])

    remove_itemx(position_id=position_id)

    await bot.delete_message(call.from_user.id, call.message.message_id)
    await bot.send_message(call.from_user.id,
                           "<b>‚òë –í—ã —É—Å–ø–µ—à–Ω–æ –æ—á–∏—Å—Ç–∏–∏–ª–∏ —Ç–æ–≤–∞—Ä—ã –ø–æ–∑–∏—Ü–∏–∏</b>",
                           reply_markup=items_default)
    messages, keyboard, have_photo = open_edit_position_func(position_id, category_id, remover)
    await state.finish()

    get_position = get_positionx("*", position_id=position_id)
    if have_photo:
        await bot.send_photo(call.from_user.id, get_position[5], messages, reply_markup=keyboard)
    else:
        await bot.send_message(call.from_user.id, messages, reply_markup=keyboard)


# –û—Ç–º–µ–Ω–∞ –æ—á–∏—Å—Ç–∏–∫–∏ –ø–æ–∑–∏—Ü–∏–∏
@dp.callback_query_handler(IsAdmin(), text_startswith="not_clear_position", state="*")
async def open_category_for_clear_position(call: CallbackQuery, state: FSMContext):
    position_id = int(call.data.split(":")[1])
    category_id = int(call.data.split(":")[2])
    remover = int(call.data.split(":")[3])

    messages, keyboard, have_photo = open_edit_position_func(position_id, category_id, remover)
    await state.finish()

    get_position = get_positionx("*", position_id=position_id)
    await bot.delete_message(call.from_user.id, call.message.message_id)
    if have_photo:
        await bot.send_photo(call.from_user.id, get_position[5], messages, reply_markup=keyboard)
    else:
        await bot.send_message(call.from_user.id, messages, reply_markup=keyboard)


################################################################################################
###################################### –£–î–ê–õ–ï–ù–ò–ï –í–°–ï–• –ü–û–ó–ò–¶–ò–ô ###################################
# –°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π –∏ —Ç–æ–≤–∞—Ä–æ–≤
@dp.callback_query_handler(IsAdmin(), text_startswith="confirm_clear_position", state="*")
async def create_input_position_name(call: CallbackQuery, state: FSMContext):
    await bot.delete_message(call.from_user.id, call.message.message_id)
    delete_msg = await bot.send_message(call.from_user.id, "<b>‚åõ –ñ–¥–∏—Ç–µ, –ø–æ–∑–∏—Ü–∏–∏ —É–¥–∞–ª—è—é—Ç—Å—è...</b>")
    get_positions = len(get_all_positionsx())
    get_items = len(get_all_itemsx())

    clear_positionx()
    clear_itemx()
    await bot.edit_message_text(f"<b>‚òë –í—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–∏–ª–∏ –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏({get_positions}—à—Ç) –∏ —Ç–æ–≤–∞—Ä—ã({get_items}—à—Ç)</b>",
                                call.from_user.id,
                                delete_msg.message_id)


# –û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
@dp.callback_query_handler(IsAdmin(), text_startswith="cancel_clear_position", state="*")
async def create_input_position_name(call: CallbackQuery, state: FSMContext):
    await bot.edit_message_text("<b>‚òë –í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π</b>",
                                call.from_user.id,
                                call.message.message_id)


################################################################################################
####################################### –î–û–ë–ê–í–õ–ï–ù–ò–ï –¢–û–í–ê–†–û–í #####################################
# –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –∫ –Ω–∞—á–∞–ª—å–Ω—ã–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤
@dp.callback_query_handler(IsAdmin(), text_startswith="back_add_item_to_category", state="*")
async def back_to_all_categories_for_add_item(call: CallbackQuery, state: FSMContext):
    get_kb = item_open_add_category_ap(0)

    await bot.edit_message_text("<b>üéÅ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å –Ω—É–∂–Ω–æ–π –≤–∞–º –ø–æ–∑–∏—Ü–∏–µ–π ‚ûï</b>",
                                call.from_user.id,
                                call.message.message_id,
                                reply_markup=get_kb)


# –°–¥–µ–ª—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –ø–æ–∑–∏—Ü–∏–µ–π –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤
@dp.callback_query_handler(IsAdmin(), text_startswith="add_item_category_nextp", state="*")
async def next_page_category_for_edit_position(call: CallbackQuery, state: FSMContext):
    remover = int(call.data.split(":")[1])

    get_kb = item_add_next_page_category_ap(remover)
    await bot.edit_message_text("<b>üéÅ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å –Ω—É–∂–Ω–æ–π –≤–∞–º –ø–æ–∑–∏—Ü–∏–µ–π ‚ûï</b>",
                                call.from_user.id,
                                call.message.message_id,
                                reply_markup=get_kb)


# –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –ø–æ–∑–∏—Ü–∏–µ–π –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤
@dp.callback_query_handler(IsAdmin(), text_startswith="add_item_category_prevp", state="*")
async def previous_page_category_for_edit_position(call: CallbackQuery, state: FSMContext):
    remover = int(call.data.split(":")[1])

    get_kb = item_add_previous_page_category_ap(remover)
    await bot.edit_message_text("<b>üéÅ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å –Ω—É–∂–Ω–æ–π –≤–∞–º –ø–æ–∑–∏—Ü–∏–µ–π ‚ûï</b>",
                                call.from_user.id,
                                call.message.message_id,
                                reply_markup=get_kb)


# –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –Ω—É–∂–Ω–æ–π –ø–æ–∑–∏—Ü–∏–µ–π
@dp.callback_query_handler(IsAdmin(), text_startswith="item_add_category", state="*")
async def open_category_for_edit_position(call: CallbackQuery, state: FSMContext):
    category_id = int(call.data.split(":")[1])

    get_positions = get_positionsx("*", category_id=category_id)
    if len(get_positions) >= 1:
        get_kb = position_add_item_position_ap(0, category_id)
        await bot.edit_message_text("<b>üéÅ –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –≤–∞–º –ø–æ–∑–∏—Ü–∏—é ‚ûï</b>",
                                    call.from_user.id,
                                    call.message.message_id,
                                    reply_markup=get_kb)
    else:
        await bot.answer_callback_query(call.id, "üéÅ –ü–æ–∑–∏—Ü–∏–∏ –≤ –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")


# –°–¥–µ–ª—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤
@dp.callback_query_handler(IsAdmin(), text_startswith="add_item_position_nextp", state="*")
async def next_page_for_edit_position(call: CallbackQuery, state: FSMContext):
    remover = int(call.data.split(":")[1])
    category_id = int(call.data.split(":")[2])

    get_kb = position_edit_next_page_position_ap(remover, category_id)
    await bot.edit_message_text("<b>üéÅ –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –≤–∞–º –ø–æ–∑–∏—Ü–∏—é ‚ûï</b>",
                                call.from_user.id,
                                call.message.message_id,
                                reply_markup=get_kb)


# –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤
@dp.callback_query_handler(IsAdmin(), text_startswith="add_item_position_prevp", state="*")
async def previous_page_for_edit_position(call: CallbackQuery, state: FSMContext):
    remover = int(call.data.split(":")[1])
    category_id = int(call.data.split(":")[2])

    get_kb = position_edit_previous_page_position_ap(remover, category_id)
    await bot.edit_message_text("<b>üéÅ –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –≤–∞–º –ø–æ–∑–∏—Ü–∏—é ‚ûï</b>",
                                call.from_user.id,
                                call.message.message_id,
                                reply_markup=get_kb)


# –í—ã–±–æ—Ä –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤
@rate_limit(0)
@dp.callback_query_handler(IsAdmin(), text_startswith="item_add_position", state="*")
async def open_for_edit_position(call: CallbackQuery, state: FSMContext):
    position_id = int(call.data.split(":")[1])
    remover = int(call.data.split(":")[2])
    category_id = int(call.data.split(":")[3])
    async with state.proxy() as data:
        data["here_cache_add_item_category_id"] = category_id
        data["here_cache_add_item_position_id"] = position_id
        data["here_cache_add_item_remover"] = remover
        data["here_count_add_items"] = 0
    await StorageItems.here_add_items.set()
    await bot.delete_message(call.from_user.id, call.message.message_id)
    await bot.send_message(call.from_user.id,
                           "<b>üì§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–æ–≤.</b>\n"
                           "‚ùï –¢–æ–≤–∞—Ä—ã –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å –ª—é–±—ã–º —É–¥–æ–±–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º.\n"
                           "‚ùó –¢–æ–≤–∞—Ä—ã —Ä–∞–∑–¥–µ–ª—è—é—Ç—Å—è –æ–¥–Ω–æ–π –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ—á–∫–æ–π. –ü—Ä–∏–º–µ—Ä:\n"
                           "<code>–õ–æ–≥–∏–Ω: 123456789\n–ü–∞—Ä–æ–ª—å: 123456789\n\n"
                           "–õ–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å: 123456789:123456789\n\n"
                           "–ü—Ä–æ—á–∏–µ –¥–∞–Ω–Ω—ã–µ...</code>",
                           reply_markup=finish_load_items_default)


# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤
@dp.message_handler(IsAdmin(), text="üì• –ó–∞–∫–æ–Ω—á–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É —Ç–æ–≤–∞—Ä–æ–≤", state="*")
async def finish_load_items(message: types.Message, state: FSMContext):
    get_all_items = 0
    try:
        async with state.proxy() as data:
            get_all_items = data["here_count_add_items"]
    except:
        pass
    await state.finish()
    delete_msg = await message.answer("<b>üì• –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ‚úÖ\n"
                                      f"‚ñ∂ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤:</b> <code>{get_all_items}—à—Ç</code>",
                                      reply_markup=items_default)


# –ü—Ä–∏–Ω—è—Ç–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞
@rate_limit(0)
@dp.message_handler(IsAdmin(), state=StorageItems.here_add_items)
async def input_item_data(message: types.Message, state: FSMContext):
    delete_msg = await message.answer("<b>‚åõ –ñ–¥–∏—Ç–µ, —Ç–æ–≤–∞—Ä—ã –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è...</b>")
    count_add = 0
    get_all_items = message.text.split("\n\n")
    for check_item in get_all_items:
        if not check_item.isspace() and check_item != "":
            count_add += 1
    async with state.proxy() as data:
        category_id = data["here_cache_add_item_category_id"]
        position_id = data["here_cache_add_item_position_id"]
        data["here_count_add_items"] += count_add
    add_itemx(category_id, position_id, get_all_items, message.from_user.id,
              clear_firstname(message.from_user.first_name))
    await bot.delete_message(message.from_user.id, delete_msg.message_id)
    await message.answer(f"<b>üì• –¢–æ–≤–∞—Ä—ã –≤ –∫–æ–ª-–≤–µ</b> <u>{count_add}—à—Ç</u> <b>–±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã ‚úÖ</b>")


################################################################################################
####################################### –ò–ó–ú–ï–ù–ï–ù–ò–ï –¢–û–í–ê–†–û–í ######################################
# –°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤
@dp.callback_query_handler(IsAdmin(), text_startswith="delete_this_item", state="*")
async def delete_item(call: CallbackQuery, state: FSMContext):
    await bot.delete_message(call.from_user.id, call.message.message_id)
    await StorageItems.here_del_items.set()
    await bot.send_message(call.from_user.id,
                           "<b>üéÅ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞–π–¥–∏ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è</b>\n"
                           "‚ùï –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä–æ–≤, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ ID —Ç–æ–≤–∞—Ä–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏–ª–∏ –ø—Ä–æ–±–µ–ª. –ü—Ä–∏–º–µ—Ä:\n"
                           "<code>‚ñ∂ 123456,123456,123456</code>\n"
                           "<code>‚ñ∂ 123456 123456 123456</code>")


# –ü—Ä–∏–Ω—è—Ç–∏–µ –∞–π–¥–∏ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∏—Ö —É–¥–∞–ª–µ–Ω–∏—è
@dp.message_handler(IsAdmin(), state=StorageItems.here_del_items)
async def input_item_id_for_delete(message: types.Message, state: FSMContext):
    remove_ids = []  # –ê–π–¥–∏ —É–¥–∞–ª—ë–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
    cancel_ids = []  # –ê–π–¥–∏ –Ω–µ–Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
    if "," in message.text:
        get_item_ids = message.text.split(",")
    elif " " in message.text:
        get_item_ids = message.text.split(" ")
    else:
        get_item_ids = [message.text]

    for item_id in get_item_ids:
        check_item = get_itemx("*", item_id=item_id)
        if check_item is not None:
            remove_itemx(item_id=item_id)
            remove_ids.append(item_id)
        else:
            cancel_ids.append(item_id)
    remove_ids = ", ".join(remove_ids)
    cancel_ids = ", ".join(cancel_ids)
    await state.finish()
    await message.answer(f"<b>‚úÖ –£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã:</b>\n"
                         f"<code>‚ñ∂ {remove_ids}</code>\n"
                         f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                         f"<b>‚ùå –ù–µ–Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã:</b>\n"
                         f"<code>‚ñ∂ {cancel_ids}</code>",
                         reply_markup=items_default)


################################################################################################
##################################### –£–î–ê–õ–ï–ù–ò–ï –í–°–ï–• –¢–û–í–ê–†–û–í ####################################
# –°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤
@dp.callback_query_handler(IsAdmin(), text_startswith="confirm_clear_item", state="*")
async def confirm_clear_all_items(call: CallbackQuery, state: FSMContext):
    await bot.delete_message(call.from_user.id, call.message.message_id)
    delete_msg = await bot.send_message(call.from_user.id, "<b>‚åõ –ñ–¥–∏—Ç–µ, —Ç–æ–≤–∞—Ä—ã —É–¥–∞–ª—è—é—Ç—Å—è...</b>")
    get_items = get_all_itemsx()

    clear_itemx()
    await bot.edit_message_text("<b>‚òë –í—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–∏–ª–∏ –≤—Å–µ —Ç–æ–≤–∞—Ä—ã</b>",
                                call.from_user.id,
                                delete_msg.message_id)


# –û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤
@dp.callback_query_handler(IsAdmin(), text_startswith="cancel_clear_item", state="*")
async def cancel_remove_all_items(call: CallbackQuery, state: FSMContext):
    await bot.edit_message_text("<b>‚òë –í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤</b>",
                                call.from_user.id,
                                call.message.message_id)
